name: Daily Email Cron Job

on:
  schedule:
    # 매일 아침 7시 KST (UTC 22:00), Github Actions 지연 고려 10분 당겨서 설정
    - cron: "50 21 * * *"
  workflow_dispatch: # 수동 실행 가능

jobs:
  send-daily-email:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # 30분 타임아웃 설정

    steps:
      - name: Check environment variables
        run: |
          echo "🔍 환경 변수 확인 중..."

          # 필수 환경 변수 체크
          missing_vars=()

          if [ -z "${{ secrets.CRON_SECRET }}" ]; then
            missing_vars+=("CRON_SECRET")
          fi

          if [ -z "${{ secrets.VERCEL_URL }}" ]; then
            missing_vars+=("VERCEL_URL")
          fi

          # 누락된 환경 변수가 있는 경우
          if [ ${#missing_vars[@]} -gt 0 ]; then
            echo "❌ 다음 환경 변수가 설정되지 않았습니다:"
            for var in "${missing_vars[@]}"; do
              echo "   - $var"
            done
            echo "⚠️  GitHub Secrets에서 환경 변수를 설정해주세요."
            echo "❌ 필수 환경 변수 누락으로 작업을 중단합니다."
            exit 1  # 에러로 처리
          fi

          echo "✅ 모든 필수 환경 변수가 설정되었습니다."

      - name: Send daily email with retry
        run: |
          echo "🚀 메일 전송 시작..."
          echo "📍 대상 URL: ${{ secrets.VERCEL_URL }}/api/cron/send-today"
          echo "⏰ 실행 시간: $(date)"

          # 재시도 설정
          max_retries=3
          retry_delay=30
          success=false

          for attempt in $(seq 1 $max_retries); do
            echo "🔄 시도 $attempt/$max_retries: 일일 메일 전송 작업 실행 중..."

            # curl 실행 (타임아웃 10분, 연결 타임아웃 30초)
            response=$(curl -s -w "\n%{http_code}\n%{exitcode}" -X POST \
              "${{ secrets.VERCEL_URL }}/api/cron/send-today" \
              -H "Content-Type: application/json" \
              -H "x-cron-secret: ${{ secrets.CRON_SECRET }}" \
              -d '{}' \
              --connect-timeout 30 \
              --max-time 600 || echo -e "\n000\n28")

            # 응답 분리 (body, http_code, curl_exit_code)
            body=$(echo "$response" | head -n -2)
            http_code=$(echo "$response" | tail -n 2 | head -n 1)
            curl_exit_code=$(echo "$response" | tail -n 1)

            echo "📊 응답 코드: $http_code"
            echo "📊 curl 종료 코드: $curl_exit_code"
            echo "📄 응답 내용: $body"

            # curl 에러 체크
            if [ "$curl_exit_code" != "0" ]; then
              echo "❌ curl 에러 (종료 코드: $curl_exit_code)"
              
              case $curl_exit_code in
                28)
                  echo "⏰ 타임아웃 에러 - 재시도 예정"
                  ;;
                6|7)
                  echo "🌐 네트워크 연결 에러 - 재시도 예정"
                  ;;
                *)
                  echo "🔧 기타 curl 에러 - 재시도 예정"
                  ;;
              esac
              
              if [ $attempt -lt $max_retries ]; then
                echo "⏳ ${retry_delay}초 후 재시도..."
                sleep $retry_delay
                continue
              else
                echo "❌ 최대 재시도 횟수 초과. 작업을 건너뜁니다."
                success=true  # 실패해도 워크플로우는 계속 진행
                break
              fi
            fi

            # HTTP 응답 코드 체크
            if [ "$http_code" = "200" ]; then
              echo "✅ HTTP 200 응답 받음"
              
              # 응답에서 실제 처리 결과 확인 (jq 없이도 동작)
              success_flag=$(echo "$body" | jq -r '.ok // false' 2>/dev/null || echo "false")
              message=$(echo "$body" | jq -r '.message // "unknown"' 2>/dev/null || echo "unknown")
              
              # jq가 없는 경우 대체 방법
              if ! command -v jq &> /dev/null; then
                echo "⚠️  jq가 설치되지 않았습니다. 기본값을 사용합니다."
                success_flag="true"  # 기본적으로 성공으로 간주
                message="jq not available"
              fi
              
              if [ "$success_flag" = "true" ]; then
                echo "✅ 처리 성공: $message"
                success=true
                break
              else
                echo "❌ API 처리 실패: $message"
                
                if [ $attempt -lt $max_retries ]; then
                  echo "⏳ ${retry_delay}초 후 재시도..."
                  sleep $retry_delay
                  continue
                else
                  echo "❌ 최대 재시도 횟수 초과. 작업을 건너뜁니다."
                  success=true  # 실패해도 워크플로우는 계속 진행
                  break
                fi
              fi
            else
              echo "❌ HTTP 에러 (코드: $http_code)"
              
              if [ $attempt -lt $max_retries ]; then
                echo "⏳ ${retry_delay}초 후 재시도..."
                sleep $retry_delay
                continue
              else
                echo "❌ 최대 재시도 횟수 초과. 작업을 건너뜁니다."
                success=true  # 실패해도 워크플로우는 계속 진행
                break
              fi
            fi
          done

          if [ "$success" = "true" ]; then
            echo "✅ 작업 완료 (성공 또는 최대 재시도 후 건너뜀)"
          else
            echo "❌ 예상치 못한 에러 발생"
            exit 1
          fi
